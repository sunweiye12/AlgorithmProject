package _04JianZhiOffer;

import org.junit.Test;

/*
 * 题目:写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。
 *
 * 思路:位运算?递归?
 * 首先看十进制是如何做的： 5+7=12，三步走
 *  第一步：相加各位的值，不算进位，得到2
 * 	第二步：计算进位值，得到10. 如果这一步的进位值为0，那么第一步得到的值就是最终结果。
 * 	第三步：重复上述两步，只是相加的值变成上述两步的得到的结果2和10，得到12。
 * 
 * 同样我们可以用三步走的方式计算二进制值相加： 5-101，7-111 
 * 	第一步：相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111。
 * 	第二步：计算进位值，得到1010，相当于各位做与操作得到101，再向左移一位得到1010，(101&111)<<1。
 * 	第三步重复上述两步， 各位相加 010^1010=1000，进位值为100=(010&1010)<<1。
 * 	继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果。
 */
public class _49不用加减乘除做加法88 {

	@Test
	public void main() {
		int num1 = 25;
		int num2 = 15;
		int add = Add(num1, num2);
		System.out.println(add);
	}
	public int Add(int num1,int num2) {
		while (num2!=0) {
            int temp = num1^num2;  //异或操作相当于不同个地方为1,正好是二进制各位相加的值
            num2 = (num1&num2)<<1; //向与操作则是两个都为1则为1,因此将相与后的结果向左移动一位,就是加法计算的进位值
            num1 = temp;		 //-->通过循环在此将进位值与相加值,相加,直到最后进位值为0
        }
        return num1;
    }
}
